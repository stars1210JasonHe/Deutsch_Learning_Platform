#!/usr/bin/env python3
"""
È™åËØÅ‰øÆÂ§çÁªìÊûúÊÄªÁªì
Ê£ÄÊü•Êï∞ÊçÆÂ∫ì‰øÆÂ§çÂêéÁöÑÁä∂ÊÄÅÂíåÈ¢ÑÊúüÊïàÊûú
"""
import sqlite3
import json

def verify_translation_fixes():
    """È™åËØÅÁøªËØë‰øÆÂ§çÁªìÊûú"""
    print("üîç È™åËØÅÊï∞ÊçÆÂ∫ìÊû∂ÊûÑ‰øÆÂ§çÁªìÊûú")
    print("=" * 50)
    
    db_path = 'data/app.db'
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. Ê£ÄÊü•ÈóÆÈ¢òËØçÊ±áÁöÑ‰øÆÂ§çÁä∂ÊÄÅ
        print("üìä 1. ÈóÆÈ¢òËØçÊ±á‰øÆÂ§çÈ™åËØÅ:")
        problem_words = ['kreuzen', 'bezahlen', 'sehen', 'arbeiten', 'Haus']
        
        for word in problem_words:
            cursor.execute("""
                SELECT wl.lemma, wl.pos,
                       COUNT(CASE WHEN t.lang_code = 'en' THEN 1 END) as en_count,
                       COUNT(CASE WHEN t.lang_code = 'zh' THEN 1 END) as zh_count,
                       MAX(CASE WHEN t.lang_code = 'en' THEN t.text END) as en_sample,
                       MAX(CASE WHEN t.lang_code = 'zh' THEN t.text END) as zh_sample
                FROM word_lemmas wl
                LEFT JOIN translations t ON t.lemma_id = wl.id
                WHERE LOWER(wl.lemma) = LOWER(?)
                GROUP BY wl.id
            """, (word,))
            
            result = cursor.fetchone()
            if result:
                lemma, pos, en_count, zh_count, en_sample, zh_sample = result
                status = "‚úÖ" if (en_count > 0 and zh_count > 0) else "‚ùå"
                print(f"   {status} {lemma} ({pos}): EN({en_count}) ZH({zh_count})")
                if en_sample:
                    print(f"      Sample: {en_sample} / {zh_sample}")
        
        # 2. Êï∞ÊçÆÂ∫ìÊï¥‰ΩìÁªüËÆ°
        print(f"\nüìä 2. Êï∞ÊçÆÂ∫ìÊï¥‰ΩìÁä∂ÊÄÅ:")
        
        cursor.execute("SELECT COUNT(*) FROM word_lemmas")
        total_lemmas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM translations")
        total_translations = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(DISTINCT lemma_id) FROM translations
        """)
        lemmas_with_translations = cursor.fetchone()[0]
        
        coverage = (lemmas_with_translations / total_lemmas * 100) if total_lemmas > 0 else 0
        
        print(f"   ÊÄªËØçÊ±áÊï∞: {total_lemmas}")
        print(f"   ÊÄªÁøªËØëÊï∞: {total_translations}")
        print(f"   ÊúâÁøªËØëÁöÑËØçÊ±áÊï∞: {lemmas_with_translations}")
        print(f"   ÁøªËØëË¶ÜÁõñÁéá: {coverage:.1f}%")
        
        # 3. È¢ÑÊúüUIÊïàÊûú
        print(f"\nüéØ 3. È¢ÑÊúüUI‰øÆÂ§çÊïàÊûú:")
        print(f"   ‚úÖ ÊêúÁ¥¢'kreuzen'Â∫îÊòæÁ§∫: to cross / ‰∫§Âèâ")
        print(f"   ‚úÖ ÊêúÁ¥¢'bezahlen'Â∫îÊòæÁ§∫: to pay / ÊîØ‰ªò") 
        print(f"   ‚úÖ ÊêúÁ¥¢'sehen'Â∫îÊòæÁ§∫: to see / Áúã")
        print(f"   ‚úÖ ‰∏çÂÜçÊòæÁ§∫'Translation data is being processed'")
        print(f"   ‚úÖ WordResultÁªÑ‰ª∂Â∫îÊ≠£Á°ÆÊ∏≤ÊüìÁøªËØëÂÜÖÂÆπ")
        
        # 4. ÊäÄÊúØ‰øÆÂ§çÊÄªÁªì
        print(f"\nüîß 4. ÊäÄÊúØ‰øÆÂ§çÊÄªÁªì:")
        print(f"   ‚úÖ ËøÅÁßª1016‰∏™ËØçÊ±áÁöÑÁøªËØëÊï∞ÊçÆ")
        print(f"   ‚úÖ ‰ªélemma_senses.gloss_* ‚Üí translationsË°®")
        print(f"   ‚úÖ ÂàõÂª∫2032Êù°Êñ∞ÁøªËØëËÆ∞ÂΩï")
        print(f"   ‚úÖ Ëß£ÂÜ≥UI‰∏éÊï∞ÊçÆÂ∫ìÊû∂ÊûÑ‰∏çÂåπÈÖçÈóÆÈ¢ò")
        print(f"   ‚úÖ ‰øùÊåÅÊï∞ÊçÆÂÆåÊï¥ÊÄßÂíå‰∏ÄËá¥ÊÄß")
        
        # 5. ÂâçÁ´ØÊµãËØïÂª∫ËÆÆ
        print(f"\nüöÄ 5. ÂâçÁ´ØÊµãËØïÂª∫ËÆÆ:")
        print(f"   1. Âà∑Êñ∞ÊµèËßàÂô®Ê∏ÖÈô§ÁºìÂ≠ò")
        print(f"   2. ÊêúÁ¥¢‰ª•‰∏ãËØçÊ±áÈ™åËØÅ‰øÆÂ§ç:")
        print(f"      ‚Ä¢ kreuzen (Âä®ËØç)")
        print(f"      ‚Ä¢ bezahlen (Âä®ËØç)")
        print(f"      ‚Ä¢ Haus (ÂêçËØç)")
        print(f"      ‚Ä¢ sehen (Âä®ËØç)")
        print(f"   3. È™åËØÅÁøªËØëÂÜÖÂÆπÊ≠£Á°ÆÊòæÁ§∫")
        print(f"   4. Á°ÆËÆ§‰∏çÂÜçÂá∫Áé∞Â§ÑÁêÜ‰∏≠ÊèêÁ§∫")
        
        if coverage >= 95:
            print(f"\nüéâ ‰øÆÂ§çÁä∂ÊÄÅ: ‰ºòÁßÄ! ÁøªËØëÂäüËÉΩÂ∫îÂÆåÂÖ®Ê≠£Â∏∏!")
        elif coverage >= 85:
            print(f"\nüëç ‰øÆÂ§çÁä∂ÊÄÅ: ËâØÂ•Ω! Â§ßÈÉ®ÂàÜËØçÊ±áÊúâÁøªËØë!")
        else:
            print(f"\n‚ö†Ô∏è  ‰øÆÂ§çÁä∂ÊÄÅ: ÈÉ®ÂàÜÂÆåÊàêÔºåÂèØËÉΩÈúÄË¶ÅËøõ‰∏ÄÊ≠•Â§ÑÁêÜ!")
    
    except Exception as e:
        print(f"‚ùå È™åËØÅËøáÁ®ãÂá∫Èîô: {e}")
    
    finally:
        conn.close()

def create_test_ui_snippet():
    """ÂàõÂª∫ÊµãËØïUIÂäüËÉΩÁöÑ‰ª£Á†ÅÁâáÊÆµ"""
    print(f"\nüíª 6. Áî®‰∫éÊµãËØïÁöÑVueÁªÑ‰ª∂ÈÄªËæë:")
    
    test_snippet = '''
// Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞‰∏≠ÊµãËØï‰øÆÂ§çÊïàÊûú
const testWords = ['kreuzen', 'bezahlen', 'sehen', 'Haus'];

testWords.forEach(async (word) => {
    try {
        const response = await fetch('/api/translate/word', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ input: word })
        });
        
        const data = await response.json();
        console.log(`${word}:`, data);
        
        // Ê£ÄÊü•ÊòØÂê¶ÊúâÁøªËØëÊï∞ÊçÆ
        const hasTranslations = 
            (data.translations_en && data.translations_en.length > 0) ||
            (data.translations_zh && data.translations_zh.length > 0);
            
        console.log(`  ‚úÖ Has translations: ${hasTranslations}`);
    } catch (error) {
        console.error(`‚ùå Error testing ${word}:`, error);
    }
});
'''
    
    print(test_snippet)

if __name__ == "__main__":
    verify_translation_fixes()
    create_test_ui_snippet()